import java.net.HttpURLConnection

task checkMavenCentral {
    doLast {
        def groupIdPath = project.group.replace('.', '/')
        def artifactId = project.name
        def version = project.version

        def artifactUrl = "https://repo1.maven.org/maven2/${groupIdPath}/${artifactId}/${version}/${artifactId}-${version}.pom"

        println "Checking if version ${version} of ${project.group}:${artifactId} exists in Maven Central..."

        try {
            def connection = new URL(artifactUrl).openConnection() as HttpURLConnection
            connection.requestMethod = 'HEAD'
            connection.connect()

            if (connection.responseCode == 200) {
                // Artifact exists in Maven Central
                project.ext.versionExistsInMavenCentral = true
                println "Version ${version} already exists in Maven Central. Skipping deployment."
            } else {
                // Artifact does not exist
                project.ext.versionExistsInMavenCentral = false
                println "Version ${version} does not exist in Maven Central. Proceeding with deployment."
            }
        } catch (Exception e) {
            // Assume artifact does not exist in case of an error
            project.ext.versionExistsInMavenCentral = false
            println "Assuming version ${version} does not exist in Maven Central due to connection error. Proceeding with deployment."
        }
    }
}

def prop(name, defaultValue = null) {
    def value = project.findProperty(name) ?: System.getenv(name.toUpperCase()) ?: defaultValue
    if(value == null) {
        GradleException(
            """
            Property '${name}' is not set. Please specify it in gradle.properties or as an environment variable.
            """)
    }
    
    if (name =="jreleaser_active" && project.ext.versionExistsInMavenCentral) {
        value = "NEVER"
    }

    return value
}