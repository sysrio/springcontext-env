name: release
on:
  workflow_dispatch:

jobs:
  release-approval:
    environment:
      name: approval
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - run: echo 'approved'

  release:
    needs:
      - release-approval
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          repository: ${{ github.event.repository.full_name }}
          ref: ${{ github.ref }}

      - name: Upload GPG public signing key to key servers
        run: |
          # Import the ASCII-armored public key from the secret
          echo "${{ secrets.GPG_PUBLIC_KEY }}" | gpg --import

          # Extract the fingerprint of the imported key
          KEY_FINGERPRINT=$(gpg --list-keys --with-colons | grep fpr | head -n 1 | cut -d: -f10)

          if [ -z "$KEY_FINGERPRINT" ]; then
            echo "Error: Failed to extract GPG key fingerprint."
            exit 1
          fi

          echo "Key Fingerprint: $KEY_FINGERPRINT"

          # Check if the key exists on keys.openpgp.org
          if curl -s "https://keys.openpgp.org/vks/v1/by-fingerprint/$KEY_FINGERPRINT" | grep -q "$KEY_FINGERPRINT"; then
            echo "Key already exists on keys.openpgp.org"
          else
            echo "Uploading key to keys.openpgp.org"
            gpg --keyserver keys.openpgp.org --send-keys "$KEY_FINGERPRINT"
          fi

          # Check if the key exists on keyserver.ubuntu.com
          if gpg --keyserver keyserver.ubuntu.com --recv-keys "$KEY_FINGERPRINT" 2>&1 | grep -q "key $KEY_FINGERPRINT:"; then
            echo "Key already exists on keyserver.ubuntu.com"
          else
            echo "Uploading key to keyserver.ubuntu.com"
            gpg --keyserver keyserver.ubuntu.com --send-keys "$KEY_FINGERPRINT"
          fi

      - name: Remove SNAPSHOT from project version number
        run: |
          # Read the current version from gradle.properties
          current_version=$(grep -oP '^version = \K[0-9]+\.[0-9]+\.[0-9]+(-SNAPSHOT)?' gradle.properties || echo "")
          if [[ -z "$current_version" ]]; then
              echo "Error: Could not find a valid version in gradle.properties"
              exit 1
          fi
          echo "Current version: $current_version"

          # Check if the version contains -SNAPSHOT
          if grep -q '^version = .*SNAPSHOT' gradle.properties; then
              echo "Removing SNAPSHOT from version"
              sed -i '/^version = /s/-SNAPSHOT//' gradle.properties
          else
              echo "No SNAPSHOT found in version"
          fi

          # Display the updated gradle.properties
          echo "Updated gradle.properties:"
          cat gradle.properties

      - name: Setup git
        uses: ./.github/actions/setup/git
        with:
          username: ${{ vars.GIT_USERNAME }}
          email: ${{ vars.USER_EMAIL }}

      - name: Setup Gradle
        uses: ./.github/actions/setup/gradle

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build and Publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew clean publish --stacktrace --no-daemon --debug --max-workers 2

      - name: Release with JReleaser
        run: ./gradlew jreleaserFullRelease --no-daemon --stacktrace -x test
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_MAVENCENTRAL_SONATYPE_USERNAME: ${{ secrets.MAVENCENTRAL_SONATYPE_USERNAME }}
          JRELEASER_MAVENCENTRAL_SONATYPE_TOKEN: ${{ secrets.MAVENCENTRAL_SONATYPE_TOKEN }}
