name: Git setup
description: Configures Git with username, email, and GPG signing keys
inputs:
  username:
    description: Git username
    required: true
  email:
    description: Git user email
    required: true
  gpg_public_key:
    description: GPG public key
    required: true
  gpg_secret_key:
    description: GPG secret key
    required: true
  gpg_passphrase:
    description: GPG passphrase
    required: true
runs:
  using: composite
  steps:
    - name: Configure Git and GPG for non-interactive use
      shell: bash
      run: |
        # Import the GPG secret key
        echo "${{ inputs.gpg_secret_key }}" | gpg --batch --import

        # Configure GPG for non-interactive use
        echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
        echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf

        # Restart the GPG agent
        gpgconf --kill gpg-agent
        gpgconf --launch gpg-agent

        # Retrieve the GPG key ID
        GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG | grep '^sec' | awk '{print $2}' | cut -d'/' -f2)

        # Set the path to the GPG wrapper script
        GPG_WRAPPER_SCRIPT="$HOME/gpg-wrapper.sh"

        # Create the GPG wrapper script
        echo "#!/bin/bash
        exec gpg --batch --passphrase '${{ inputs.gpg_passphrase }}' --pinentry-mode loopback \"\$@\"
        " > "$GPG_WRAPPER_SCRIPT"
        chmod u+x "$GPG_WRAPPER_SCRIPT"

        # Configure Git
        git config --global user.signingkey "$GPG_KEY_ID"
        git config --global user.name "${{ inputs.username }}"
        git config --global user.email "${{ inputs.email }}"
        git config --global commit.gpgSign true
        git config --global tag.gpgSign true
        git config --global gpg.program "$GPG_WRAPPER_SCRIPT"

        # Verify Git configuration
        git config --list
        
